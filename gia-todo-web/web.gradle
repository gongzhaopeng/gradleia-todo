import org.akhikhl.gretty.AppStartTask
import org.akhikhl.gretty.AppStopTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.gretty:gretty:3.0.5")
    }
}

apply plugin: 'war'
apply plugin: "org.gretty"

configurations {
    functTestCompile.extendsFrom testCompileClasspath
    functTestRuntime.extendsFrom testCompileClasspath
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '4.8.1'

dependencies {
    implementation project(':gia-todo-model')
    implementation project(':gia-todo-repository')

    providedCompile 'javax.servlet:javax.servlet-api:4.0.1',
            'javax.servlet.jsp:javax.servlet.jsp-api:2.3.3'
    runtimeOnly 'javax.servlet:jstl:1.1.2',
            'taglibs:standard:1.1.2'

//    functTestCompile('org.gebish:geb-core:7.0') {
//        exclude group: 'org.apache.groovy'
//    }
    functTestCompile('org.gebish:geb-spock:7.0') {
        exclude group: 'org.apache.groovy'
    }
    functTestCompile "$seleniumGroup:selenium-support:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-chrome-driver:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

gretty {
    httpPort = 8080
    contextPath = '/todo'
    integrationTestTask = 'functionalTest'
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

tasks.register('functionalGrettyStart', AppStartTask) {
    interactive = false
}

tasks.register('functionalGrettyStop', AppStopTask)

tasks.register('functionalTest', Test) {
    useJUnitPlatform()

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    reports.html.outputLocation.set(file("${reports.html.outputLocation.get()}/functional"))
    reports.junitXml.outputLocation.set(file("${reports.junitXml.outputLocation.get()}/functional"))

    systemProperty 'geb.env', 'chrome'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
}

check.dependsOn 'functionalTest'