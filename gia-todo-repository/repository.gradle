import com.atzu68.learning.gia.NotificationTestListener

import static org.gradle.api.tasks.testing.logging.TestLogEvent.*

apply from: 'databaseSetup.gradle'

dependencies {
    implementation project(':gia-todo-model')

    runtimeOnly 'com.h2database:h2:2.1.214'

    testImplementation group: 'org.testng', name: 'testng', version: '7.5'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.3-groovy-4.0'
}

def testNG = tasks.register('testNG', Test) {
    useTestNG()
}

test {
    dependsOn('testNG')
    useJUnitPlatform()

    reports.html.outputLocation.set(file("${reports.html.outputLocation.get()}/unit"))
    reports.junitXml.outputLocation.set(file("${reports.junitXml.outputLocation.get()}/unit"))

    systemProperty 'items', '20'
    minHeapSize = '128m'
    maxHeapSize = '256m'
    jvmArgs '-XX:MaxPermSize=128m'

    forkEvery = 5
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2)

//    afterSuite { TestDescriptor suite, TestResult result ->
//        if (!suite.parent && result.getTestCount()) {
//            def elapsedTestTime = result.endTime - result.startTime
//            println "Elapsed time for execution of ${result.testCount} test(s): $elapsedTestTime ms"
//        }
//    }
    addTestListener(new NotificationTestListener(project))
}

sourceSets {
    integrationTest {
        groovy.srcDir file('src/integTest/groovy')
        resources.srcDir file('src/integTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testCompileClasspath
        runtimeClasspath = sourceSets.main.output + output + configurations.testRuntimeClasspath
    }
}

tasks.register('integrationTest', Test) {
    description = 'Runs the integration tests.'
    group = 'verification'

    useJUnitPlatform()

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    reports.html.outputLocation.set(file("${reports.html.outputLocation.get()}/integration"))
    reports.junitXml.outputLocation.set(file("${reports.junitXml.outputLocation.get()}/integration"))

    dependsOn 'startAndPrepareDatabase'
    finalizedBy 'stopDatabase'
}

tasks.withType(Test).configureEach {
    testLogging {
        showStandardStreams = true
        exceptionFormat 'full'
        events STARTED, PASSED, SKIPPED, FAILED
    }
}

tasks.register('aggregateTestReports', TestReport) {
    destinationDirectory = test.reports.html.outputLocation

//        reportOn test, testNG.get()
    testResults.from(test.binaryResultsDirectory, testNG.get().binaryResultsDirectory)
}

check.dependsOn 'aggregateTestReports'
check.dependsOn 'integrationTest'

tasks.register('hello') {
    doLast {
        println 'Hello from repository project'
    }
}